sort1 uses: Sort by bubble / Bubble Sort

How do you know?: We used the Sorted5000.txt file to arrive at this result, this file is sorted in order from smallest to largest.

Sort1 took 0.028 seconds and was the fastest algorithm, this one seems to be the fastest, knowing that the numbers are in order, so we came to the conclusion that this is a bubble sort.

sort2 uses: Sort by merge / Merge sort

How do you know?: We used the file Random5000.txt to arrive at this result, this file is a list of random numbers.

Sort2 took 0.042 seconds to sort this list. Sort2 seems to work with merge sort which would evidently be the best for sorting this list of random numbers.


sort3 uses: Sort by selection / Selection sort

How do you know?: We used the file reversed50000.txt which is in numbers ordered from highest to lowest “In descending order”.
Sort3 took 4.427 seconds this was the fastest algorithm. Because we know that a selection algorithm would be best for sorting this list of numbers, Sort3 seems to be such a selection algorithm.





Sorry if it's hard to read, and I'm Brazilian here is the untranslated version of my code




sort1 uses: Classificação por bolha

How do you know?: Usamos o arquivo Sorted5000.txt para chegar a esse resultado, esse arquivo está ordenado em ordem do menor para o maior.

Sort1 demorou 0.028 segundos e foi o algorítimo mais rápido, esse parece ser o mais rápido, sabendo que os números estão em ordem, com isso chegamos a conclusão que essa e uma classificação em bolha.

Também fizemos a seguinte comparação com o maior arquivo que estava em ordem de classificação, que e o sorted50000.txt com 50.000 números em ordem de classificação.  

Cronometramos ./sort1 no arquivo sorted50000.txt para ver quanto  tempo demora para classificar os números e imprimi-los e levou pouco mais de 3 segundos para ./sort1 poder classificar e imprimir todos esses números. Agora comparando ./sort1 com ./sort3 enquanto ./sort1 levou cerca de trés segundo, parece que ./sort3 esta demorando cerca de 7 segundos que e mais que o tempo necessário. 

Para números ordenados ./sort1 parece esta superando ./sort3, enquanto para números aleatórios eles estão se comportando de maneira bastante semelhante. 

E isso e um sinal que ./sort1 e provavelmente uma ordenação por bolha é ./sort3 seja provavelmente uma ordenação por seleção. sabendo que ordenação por bolhas funciona melhor quando os números já estão ordenados é a ordenação por seleção ainda precisa percorrer toda a matriz procurando o menor elemento todas as vezes. Fazendo varias passagens pela matriz mesmo que a matriz já esteja em ordem de classificação. Isso nos da a resposta para qual algoritmo  esta sendo usado por cada um desses programas. 

1) ./sort1 esta usando a classificação por bolha 
2) ./sort3 esta usando a ordenação por seleção 


sort2 uses: Classificação por mesclagem

How do you know?: Usamos o arquivo Random5000.txt para chegar a esse resultado, esse arquivo se trata de uma lista de números aleatórios

Sort2 demorou 0,042 segundos para ordenar essa lista, esse e o mais rápido. Sort2 parece trabalhar com classificação por mesclagem que evidentemente seria o melhor para classificar essa lista de numeros aleatórios. 

Se tentarmos esses programas em um arquivo random10000, você espera que a ordenação por mesclagem fosse mais rápida. 

Cronometrando ./sort1 em random10000.txt vemos que demorou 0,505 segundos acerca de meio segundo, tentando com ./sort2 fazendo a mesma coisa com o mesmo arquivo levou  0,038 segundo podemos dizer que foi mais rápido que ./sort1, tentando também ./sort3 e parece que esse demora 0.566 segundo com isso e o mais lento. 

Com essas informações parece bastante razoável concluir que ./sort2 foi o mais rápido em lidar com essas entradas aleatórias e provavelmente e o marge sort. 


sort3 uses: Classificação por seleção

How do you know?: Usamos o arquivo reversed50000.txt que está em números ordenados do maior para o menor “Em ordem decrescente”.
Sort3 demorou 4427s esse foi o algoritmo mais rápido. Por sabemos que um algoritmo de seleção seria o melhor para ordenar esse tipo de lista de números, Sort3 parece ser esse algoritmo de seleção.


